<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other Methods on PGO: PostgreSQL Operator from Crunchy Data Documentation</title>
    <link>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/</link>
    <description>Recent content in Other Methods on PGO: PostgreSQL Operator from Crunchy Data Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bash Scripts</title>
      <link>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/bash/</guid>
      <description>A full installation of PGO includes the following steps:
 create a project structure configure your environment variables configure PGO templates create security resources deploy the operator install pgo client (end user command tool)  PGO end-users are only required to install the pgo client on their host and can skip the server-side installation steps. pgo clients are provided for Linux, Mac, and Windows clients.
PGO can be deployed by multiple methods including:</description>
    </item>
    
    <item>
      <title>Helm Chart</title>
      <link>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/helm/</guid>
      <description>PGO: The Postgres Operator Helm Chart Overview PGO, the Postgres Operator from Crunchy Data, comes with a container called pgo-deployer which handles a variety of lifecycle actions for the PostgreSQL Operator, including:
 Installation Upgrading Uninstallation  After configuring the values.yaml file with you configuration options, the installer will be run using the helm command line tool and takes care of setting up all of the objects required to run the PostgreSQL Operator.</description>
    </item>
    
    <item>
      <title>Google Cloud Marketplace</title>
      <link>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/google-cloud-marketplace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/google-cloud-marketplace/</guid>
      <description>PGO: the PostgreSQL Operator from Crunchy Data is installed as part of Crunchy PostgreSQL for GKE that is available in the Google Cloud Marketplace.
Step 1: Install Install Crunchy PostgreSQL for GKE to a Google Kubernetes Engine cluster using Google Cloud Marketplace.
Step 2: Verify Installation Install kubectl using the gcloud components command of the Google Cloud SDK or by following the Kubernetes documentation.
Using the gcloud utility, ensure you are logged into the GKE cluster in which you installed PGO, the PostgreSQL Operator, and see that it is running in the namespace in which you installed it.</description>
    </item>
    
    <item>
      <title>OperatorHub.io</title>
      <link>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/operator-hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/postgres-operator/4.5.8/installation/other/operator-hub/</guid>
      <description>If your Kubernetes cluster is already running the Operator Lifecycle Manager, then PGO, the Postgres Operator from Crunchy Data, can be installed as part of Crunchy PostgreSQL for Kubernetes that is available in OperatorHub.io.
Before You Begin There are some optional Secrets you can add before installing the PostgreSQL Operator into your cluster.
Secrets (optional) If you plan to use AWS S3 to store backups and would like to have the keys available for every backup, you can create a Secret as described below:</description>
    </item>
    
  </channel>
</rss>